package loginReg;

import adminPackage.admindashboard;
import config.Session;
import config.dbConnector;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.Border;
import userPackage.userDashboard;
import javax.swing.JFrame;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 *
 * @author PATRICIA
 */
public class loginform extends JFrame {

    /**
     * Creates new form loginform
     */
    public loginform() {
        initComponents();
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    }

    Color hover = new Color(0, 153, 153);
    Color defbutton = new Color(204, 255, 204);

    Border empty = BorderFactory.createEmptyBorder();

    void buttonBorderAnimation(JPanel panel) {
        panel.setBackground(hover);
        panel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        panel.setBorder(BorderFactory.createStrokeBorder(new BasicStroke(2.0f)));
    }

    void buttonDefaultColor(JPanel panel) {
        panel.setBackground(defbutton);
        panel.setBorder(empty);
    }

    private boolean validateLogin() {
        String user = enterusername.getText().trim();
        String password = new String(enterpass.getPassword());

        if (user.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (password.length() < 8) {
            JOptionPane.showMessageDialog(this, "Password must be at least 8 characters long!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    public static String passwordHash(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA"); // Use SHA-256
            md.update(password.getBytes());
            byte[] rbt = md.digest();
            StringBuilder sb = new StringBuilder();

            for (byte b : rbt) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace(); // Log the error properly
            return null;
        }
    }

    private void logActivity(int user_id, String action) {
        String sql = "INSERT INTO system_logs (user_id, logs_action, logs_date) VALUES (?, ?, NOW())";
        dbConnector db = new dbConnector();

        try (Connection conn = db.getConnection();
                PreparedStatement pst = conn.prepareStatement(sql)) {
            pst.setInt(1, user_id);
            pst.setString(2, action);
            pst.executeUpdate();
        } catch (SQLException e) {
            System.err.println("Error logging activity: " + e.getMessage());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        main1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        main2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        enterusername = new javax.swing.JTextField();
        username = new javax.swing.JLabel();
        pass = new javax.swing.JLabel();
        enterpass = new javax.swing.JPasswordField();
        click = new javax.swing.JLabel();
        logbg = new javax.swing.JPanel();
        login = new javax.swing.JLabel();
        canbg = new javax.swing.JPanel();
        cancel = new javax.swing.JLabel();
        forgotpass = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        main1.setBackground(new java.awt.Color(255, 255, 255));
        main1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/download_updated.png"))); // NOI18N
        main1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 306, 217));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/nother_updated.png"))); // NOI18N
        main1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, -1, -1));

        main2.setBackground(new java.awt.Color(0, 51, 51));
        main2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SIGN IN");
        main2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 345, -1));

        enterusername.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        enterusername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterusernameActionPerformed(evt);
            }
        });
        main2.add(enterusername, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 227, 32));

        username.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        username.setForeground(new java.awt.Color(255, 255, 255));
        username.setText("Username:");
        main2.add(username, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        pass.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        pass.setForeground(new java.awt.Color(255, 255, 255));
        pass.setText("Password:");
        main2.add(pass, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, -1, -1));

        enterpass.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        enterpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterpassActionPerformed(evt);
            }
        });
        enterpass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                enterpassKeyPressed(evt);
            }
        });
        main2.add(enterpass, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 227, 34));

        click.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        click.setForeground(new java.awt.Color(255, 255, 255));
        click.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        click.setText("Click Here to Register");
        click.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clickMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clickMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                clickMouseExited(evt);
            }
        });
        main2.add(click, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 280, 227, -1));

        logbg.setBackground(new java.awt.Color(204, 255, 204));
        logbg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        logbg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logbgMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logbgMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                logbgMouseExited(evt);
            }
        });

        login.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        login.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login.setText("Login");

        javax.swing.GroupLayout logbgLayout = new javax.swing.GroupLayout(logbg);
        logbg.setLayout(logbgLayout);
        logbgLayout.setHorizontalGroup(
            logbgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(login, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        logbgLayout.setVerticalGroup(
            logbgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(login, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
        );

        main2.add(logbg, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, 227, -1));

        canbg.setBackground(new java.awt.Color(204, 255, 204));
        canbg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        canbg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canbgMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                canbgMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                canbgMouseExited(evt);
            }
        });

        cancel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cancel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cancel.setText("Cancel");

        javax.swing.GroupLayout canbgLayout = new javax.swing.GroupLayout(canbg);
        canbg.setLayout(canbgLayout);
        canbgLayout.setHorizontalGroup(
            canbgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cancel, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
        );
        canbgLayout.setVerticalGroup(
            canbgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
        );

        main2.add(canbg, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, 230, -1));

        forgotpass.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        forgotpass.setForeground(new java.awt.Color(255, 255, 255));
        forgotpass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        forgotpass.setText("Forgot Password?");
        forgotpass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                forgotpassMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                forgotpassMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                forgotpassMouseExited(evt);
            }
        });
        main2.add(forgotpass, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 310, 230, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(main1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(main2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(main2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void enterusernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterusernameActionPerformed

    }//GEN-LAST:event_enterusernameActionPerformed

    private void enterpassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterpassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enterpassActionPerformed

    private void clickMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clickMouseClicked
        registerform regForm = new registerform();
        regForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_clickMouseClicked

    private void clickMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clickMouseEntered
        click.setForeground(java.awt.Color.GREEN);

    }//GEN-LAST:event_clickMouseEntered

    private void clickMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clickMouseExited
        click.setForeground(java.awt.Color.WHITE);
    }//GEN-LAST:event_clickMouseExited

    private void canbgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canbgMouseClicked
        int response = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to cancel the login process?",
                "Confirm Cancel",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        if (response == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_canbgMouseClicked

    private void canbgMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canbgMouseEntered
        buttonBorderAnimation(canbg);
    }//GEN-LAST:event_canbgMouseEntered

    private void canbgMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canbgMouseExited
        buttonDefaultColor(canbg);
    }//GEN-LAST:event_canbgMouseExited

    private void logbgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logbgMouseClicked
         String email = enterusername.getText();
        String password = new String(enterpass.getPassword());

        if (email.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter both email and password.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String hashedPassword = passwordHash(password);
        String sql = "SELECT * FROM user_table WHERE email = ? AND password = ?";

        dbConnector db = new dbConnector();

        try (Connection conn = db.getConnection();
                PreparedStatement pst = conn.prepareStatement(sql)) {

            pst.setString(1, email);
            pst.setString(2, hashedPassword);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                int user_id = rs.getInt("user_id");
                String user_status = rs.getString("user_status");

                if (user_status.equalsIgnoreCase("Pending")) {
                    JOptionPane.showMessageDialog(this, "Account Pending. Please contact the Admin.", "Access Denied", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                Session session = Session.getInstance();
                session.setUid(rs.getInt("user_id")); // Set user_id
                session.setFname(rs.getString("firstName"));
                session.setLname(rs.getString("lastName"));
                session.setType(rs.getString("use_type"));

                logActivity(session.getUid(), session.getType() + " Logged in");

                JOptionPane.showMessageDialog(this, "Login successful!", "Success", JOptionPane.INFORMATION_MESSAGE);

                String firstName = rs.getString("firstName");
                String lastName = rs.getString("lastName");
                String fullname = firstName + " " + lastName;
                String use_type = rs.getString("use_type");

                if (use_type.equals("Admin")) {
                    String imgPath = rs.getString("u_image"); // Get user image from DB
                    admindashboard admin = new admindashboard(fullname, imgPath);
                    admin.setVisible(true);
                    System.out.println("Admin dashboard opened");
                } else {
                    String imgPath = rs.getString("u_image");
                    userDashboard user = new userDashboard(fullname, imgPath);
                    user.setVisible(true);
                    System.out.println("User dashboard opened");
                }

                this.dispose();

            } else {
                JOptionPane.showMessageDialog(this, "Incorrect username or password.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_logbgMouseClicked

    private void logbgMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logbgMouseEntered
        buttonBorderAnimation(logbg);
    }//GEN-LAST:event_logbgMouseEntered

    private void logbgMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logbgMouseExited
        buttonDefaultColor(logbg);
    }//GEN-LAST:event_logbgMouseExited

    private void enterpassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_enterpassKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String email = enterusername.getText();
            String password = new String(enterpass.getPassword());

            if (email.isEmpty() || password.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter both email and password.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String hashedPassword = passwordHash(password);
            String sql = "SELECT * FROM user_table WHERE email = ? AND password = ?";

            dbConnector db = new dbConnector();

            try (Connection conn = db.getConnection();
                    PreparedStatement pst = conn.prepareStatement(sql)) {

                pst.setString(1, email);
                pst.setString(2, hashedPassword);
                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    int user_id = rs.getInt("user_id");
                    String user_status = rs.getString("user_status");

                    if (user_status.equalsIgnoreCase("Pending")) {
                        JOptionPane.showMessageDialog(this, "Account Pending. Please contact the Admin.", "Access Denied", JOptionPane.WARNING_MESSAGE);
                        return;
                    }

                    Session session = Session.getInstance();
                    session.setUid(rs.getInt("user_id")); // Set user_id
                    session.setFname(rs.getString("firstName"));
                    session.setLname(rs.getString("lastName"));
                    session.setType(rs.getString("use_type"));

// ✅ Log login activity using the getter
                    logActivity(session.getUid(), session.getType() + " Logged in");

                    JOptionPane.showMessageDialog(this, "Login successful!", "Success", JOptionPane.INFORMATION_MESSAGE);

                    String firstName = rs.getString("firstName");
                    String lastName = rs.getString("lastName");
                    String fullname = firstName + " " + lastName;
                    String use_type = rs.getString("use_type");

                    if (use_type.equals("Admin")) {
                        String imgPath = rs.getString("u_image"); // Get user image from DB
                        admindashboard admin = new admindashboard(fullname, imgPath);
                        admin.setVisible(true);
                        System.out.println("Admin dashboard opened");
                    } else {
                        String imgPath = rs.getString("u_image");
                        userDashboard user = new userDashboard(fullname, imgPath);
                        user.setVisible(true);
                        System.out.println("User dashboard opened");
                    }

                    this.dispose();

                } else {
                    JOptionPane.showMessageDialog(this, "Incorrect username or password.", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_enterpassKeyPressed

    private void forgotpassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forgotpassMouseClicked
        new forgotPassword().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_forgotpassMouseClicked

    private void forgotpassMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forgotpassMouseEntered
        forgotpass.setForeground(java.awt.Color.GREEN);
    }//GEN-LAST:event_forgotpassMouseEntered

    private void forgotpassMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forgotpassMouseExited
        forgotpass.setForeground(java.awt.Color.WHITE);
    }//GEN-LAST:event_forgotpassMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(loginform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(loginform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(loginform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(loginform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new loginform().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel canbg;
    private javax.swing.JLabel cancel;
    private javax.swing.JLabel click;
    private javax.swing.JPasswordField enterpass;
    private javax.swing.JTextField enterusername;
    private javax.swing.JLabel forgotpass;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel logbg;
    private javax.swing.JLabel login;
    private javax.swing.JPanel main1;
    private javax.swing.JPanel main2;
    private javax.swing.JLabel pass;
    private javax.swing.JLabel username;
    // End of variables declaration//GEN-END:variables
}
